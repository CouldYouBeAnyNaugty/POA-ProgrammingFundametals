									C++ vectors 
NOTE: Vector is a class in C++ (like normal class with some fields and methods and a normal constructor)

Constructor: create vectors and initialize them with some data
Operators: ->assing, ->compare, ->access
Deconstructor: delets the vector(called automatically in C++)

1. .assing(): A method which is used to assign certain data to the vector
2. .at(): returns an element of the vector at certain index "i"
3. .back(): returns a reference to the last element of a vector
4. .front(): returns a reference to the first element of a vector
5. .capacity(): returns the number of elements a vector can hold
6. .clear(): removes all the elements from the vector;
7. .begin(): returns an iterator to the beginning of a vector
8. .end(): returns an iterator to the end of a vector
	Example => for(i = v.begin(); i != v.end(); i++){ // do some stuff }
	.rbegin() returns a reverse iterator to the end of a vector
	.rend)() returns a reverse iterator to the end of a vector
9. .empty(): returns true of there is no element in a vector, otherwise false
10. .insert(): inserts element to a vector
11. .max_size(): returns the maximum number of elements a vector can hold 
12. .pop_back(): removes the last element of a vector
13. .push_back(): at an element to the end of a vector
14. .reserve(): sets the minimum capacity of a vector
15. .size(): returns the size of a vector
16. .swap(): swaps the elements of two vectors (to and from)


Some of the methods written above are fairly straight forward, but some are not. 
insert();
If you are looking for better time complexity, this might not be the right choice for you.
This is due to the fact that inserting an element to an array means moving all the elements to the right from that location must shifted one unit right, which takes linear time. 
So better use Linked lists, in which we can insert elements quite easily.
Any way, here are the three different overloading of the method:
1.	iterator insert(iterator loc, const TYPE& val);
 >this method takes a vector::iterator and a refernced const value of anytype. 
 >it returns an iterator to the location where it inserted the value.
 
 ..inserts the value in the location and boom
 
2.  void insert(iterator loc, size_t num, const TYPE& val);
 >this overload takes a vector::iterator, a positve number, and a referenced value of any type
 >it returns nothing.
 
 ..inserts "number" copies of the value in the given locaotion and boom

3. 	void insert(iterator loc, input_iterator start, input_iterator end);
 >this overload takes a vector::iterator, and other two vector::iterators from the array or a verctor from which we are reading the values
 >it returns nothing.
 
 ..inserts some values from another vector into the given vector starting form the given start iterator and ending on the given end iterator. 
	


	
